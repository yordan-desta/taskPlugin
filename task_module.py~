# -*- coding: utf-8 -*-
"""
/***************************************************************************
 task_init
                                 A QGIS plugin
 task_handling
                              -------------------
        begin                : 2015-03-16
        git sha              : $Format:%H$
        copyright            : (C) 2015 by pyordan
        email                : pyordan@me
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt4.QtCore import *
from PyQt4.QtGui import *
# Initialize Qt resources from file resources.py
import resources_rc
# Import the code for the dialog
from task_module_dialog import *
import os.path
from qgis import *


class task_init:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'task_init_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.task_init_dlg = task_initDialog()
        self.task_reload_dlg= task_reloadDialog()
        self.task_select_dlg = task_selectDialog()
        self.task_finish_dlg= task_finishDialog()


        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Task')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'task_init')
        self.toolbar.setObjectName(u'task_init')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        return QCoreApplication.translate('task_init', message)
    """

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
       
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
    """
    def initGui(self):

        """Create the menu entries and toolbar icons inside the QGIS GUI."""
	"""this part of the code is costom for adding new menu entry called Task"""
        """seting up the 'Task' menu"""
        self.menu=QMenu(self.iface.mainWindow())
        self.menu.setObjectName("task_menu_object")
        self.menu.setTitle("Task")

        """setting up the 'task_init'action"""
        self.action_task_init=QAction(QIcon(":/plugins/task/icon.png"),"Initialize  			",self.iface.mainWindow())
        self.action_task_init.setObjectName("task_action_object")
        self.action_task_init.setWhatsThis("initialize task")

        #connection between QAction object and its action function
        QObject.connect(self.action_task_init,SIGNAL("triggered()"),self.run_task_init)

        """setting up the 'task_select'action"""
        self.action_task_select=QAction("Select  ",self.iface.mainWindow())
        self.action_task_select.setObjectName("select_action_object")
        self.action_task_select.setWhatsThis("select task")

        #connection between QAction object and its action function
        QObject.connect(self.action_task_select,SIGNAL("triggered()"),self.run_task_select)

        """setting up the 'task_reload' action"""
        self.action_task_reload=QAction("Reload  ",self.iface.mainWindow())
        self.action_task_reload.setObjectName("reload_action_object")
        self.action_task_reload.setWhatsThis("reload task")

        #connection between QAction object and its action function
        QObject.connect(self.action_task_reload,SIGNAL("triggered()"),self.run_task_reload)


        """setting up the 'task_finish' action"""
        self.action_task_finish=QAction("Finish  ",self.iface.mainWindow())
        self.action_task_finish.setObjectName("finish_action_object")
        self.action_task_finish.setWhatsThis("finish task")

        #connection between QAction object and its action function
        QObject.connect(self.action_task_finish,SIGNAL("triggered()"),self.run_task_finish)

        """add action to menu"""
        self.menu.addAction(self.action_task_init)
        self.menu.addAction(self.action_task_select)
        self.menu.addAction(self.action_task_reload)
        self.menu.addAction(self.action_task_finish)
        """setup the menu bar on the Qgis iface instance"""
        menubar=self.iface.mainWindow().menuBar()

        """inseting our menu into the menuBar"""
        menubar.insertMenu(self.iface.firstRightStandardMenu().menuAction(),self.menu)
        self.iface.addToolBarIcon(self.action_task_init)



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Task'),
                action)
            self.iface.removeToolBarIcon(action)


    def run_task_init(self):
        self.task_init_dlg.show()
        # Run the dialog event loop
        result = self.task_init_dlg.exec_()
        pass
    def run_task_reload(self):
        self.task_reload_dlg.show()
        result=self.task_reload_dlg.exec_()
    def run_task_select(self):
        self.task_select_dlg.show()
        result=self.task_select_dlg.exec_()
    def run_task_finish(self):
        self.task_select_dlg.show()
